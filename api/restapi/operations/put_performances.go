// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutPerformancesHandlerFunc turns a function with the right signature into a put performances handler
type PutPerformancesHandlerFunc func(PutPerformancesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPerformancesHandlerFunc) Handle(params PutPerformancesParams) middleware.Responder {
	return fn(params)
}

// PutPerformancesHandler interface for that can handle valid put performances params
type PutPerformancesHandler interface {
	Handle(PutPerformancesParams) middleware.Responder
}

// NewPutPerformances creates a new http.Handler for the put performances operation
func NewPutPerformances(ctx *middleware.Context, handler PutPerformancesHandler) *PutPerformances {
	return &PutPerformances{Context: ctx, Handler: handler}
}

/*PutPerformances swagger:route PUT /performances putPerformances

Add or update a performance

Add or update a performance

*/
type PutPerformances struct {
	Context *middleware.Context
	Handler PutPerformancesHandler
}

func (o *PutPerformances) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutPerformancesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
