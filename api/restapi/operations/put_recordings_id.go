// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutRecordingsIDHandlerFunc turns a function with the right signature into a put recordings ID handler
type PutRecordingsIDHandlerFunc func(PutRecordingsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRecordingsIDHandlerFunc) Handle(params PutRecordingsIDParams) middleware.Responder {
	return fn(params)
}

// PutRecordingsIDHandler interface for that can handle valid put recordings ID params
type PutRecordingsIDHandler interface {
	Handle(PutRecordingsIDParams) middleware.Responder
}

// NewPutRecordingsID creates a new http.Handler for the put recordings ID operation
func NewPutRecordingsID(ctx *middleware.Context, handler PutRecordingsIDHandler) *PutRecordingsID {
	return &PutRecordingsID{Context: ctx, Handler: handler}
}

/*PutRecordingsID swagger:route PUT /recordings/{id} putRecordingsId

Add or update a recording

Add or update a recording

*/
type PutRecordingsID struct {
	Context *middleware.Context
	Handler PutRecordingsIDHandler
}

func (o *PutRecordingsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutRecordingsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
