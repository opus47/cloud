// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteComposersIDHandlerFunc turns a function with the right signature into a delete composers ID handler
type DeleteComposersIDHandlerFunc func(DeleteComposersIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteComposersIDHandlerFunc) Handle(params DeleteComposersIDParams) middleware.Responder {
	return fn(params)
}

// DeleteComposersIDHandler interface for that can handle valid delete composers ID params
type DeleteComposersIDHandler interface {
	Handle(DeleteComposersIDParams) middleware.Responder
}

// NewDeleteComposersID creates a new http.Handler for the delete composers ID operation
func NewDeleteComposersID(ctx *middleware.Context, handler DeleteComposersIDHandler) *DeleteComposersID {
	return &DeleteComposersID{Context: ctx, Handler: handler}
}

/*DeleteComposersID swagger:route DELETE /composers/{id} deleteComposersId

Delete a composer

Delete a composer

*/
type DeleteComposersID struct {
	Context *middleware.Context
	Handler DeleteComposersIDHandler
}

func (o *DeleteComposersID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteComposersIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
