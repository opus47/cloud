// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetComposersHandlerFunc turns a function with the right signature into a get composers handler
type GetComposersHandlerFunc func(GetComposersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetComposersHandlerFunc) Handle(params GetComposersParams) middleware.Responder {
	return fn(params)
}

// GetComposersHandler interface for that can handle valid get composers params
type GetComposersHandler interface {
	Handle(GetComposersParams) middleware.Responder
}

// NewGetComposers creates a new http.Handler for the get composers operation
func NewGetComposers(ctx *middleware.Context, handler GetComposersHandler) *GetComposers {
	return &GetComposers{Context: ctx, Handler: handler}
}

/*GetComposers swagger:route GET /composers getComposers

List composers

List composers

*/
type GetComposers struct {
	Context *middleware.Context
	Handler GetComposersHandler
}

func (o *GetComposers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetComposersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
