// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutPartsIDHandlerFunc turns a function with the right signature into a put parts ID handler
type PutPartsIDHandlerFunc func(PutPartsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPartsIDHandlerFunc) Handle(params PutPartsIDParams) middleware.Responder {
	return fn(params)
}

// PutPartsIDHandler interface for that can handle valid put parts ID params
type PutPartsIDHandler interface {
	Handle(PutPartsIDParams) middleware.Responder
}

// NewPutPartsID creates a new http.Handler for the put parts ID operation
func NewPutPartsID(ctx *middleware.Context, handler PutPartsIDHandler) *PutPartsID {
	return &PutPartsID{Context: ctx, Handler: handler}
}

/*PutPartsID swagger:route PUT /parts/{id} putPartsId

Add or update a part

Add or update a part

*/
type PutPartsID struct {
	Context *middleware.Context
	Handler PutPartsIDHandler
}

func (o *PutPartsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutPartsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
