// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRecordingsIDHandlerFunc turns a function with the right signature into a get recordings ID handler
type GetRecordingsIDHandlerFunc func(GetRecordingsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRecordingsIDHandlerFunc) Handle(params GetRecordingsIDParams) middleware.Responder {
	return fn(params)
}

// GetRecordingsIDHandler interface for that can handle valid get recordings ID params
type GetRecordingsIDHandler interface {
	Handle(GetRecordingsIDParams) middleware.Responder
}

// NewGetRecordingsID creates a new http.Handler for the get recordings ID operation
func NewGetRecordingsID(ctx *middleware.Context, handler GetRecordingsIDHandler) *GetRecordingsID {
	return &GetRecordingsID{Context: ctx, Handler: handler}
}

/*GetRecordingsID swagger:route GET /recordings/{id} getRecordingsId

Get recording information

Get recording information

*/
type GetRecordingsID struct {
	Context *middleware.Context
	Handler GetRecordingsIDHandler
}

func (o *GetRecordingsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRecordingsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
