// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"log"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	cors "github.com/rs/cors"

	"github.com/opus47/cloud/api/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../openapi.yml

func configureFlags(api *operations.Opus47API) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.Opus47API) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	/* ==========================================================================
	 *
	 *    Composers
	 *
	 * ========================================================================*/

	api.DeleteComposersIDHandler = operations.DeleteComposersIDHandlerFunc(
		func(params operations.DeleteComposersIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetComposersHandler = operations.GetComposersHandlerFunc(
		func(params operations.GetComposersParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetComposersIDHandler = operations.GetComposersIDHandlerFunc(
		func(params operations.GetComposersIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutComposersIDHandler = operations.PutComposersIDHandlerFunc(
		func(params operations.PutComposersIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	/* ==========================================================================
	 *
	 *    Keys
	 *
	 * ========================================================================*/

	api.DeleteKeysIDHandler = operations.DeleteKeysIDHandlerFunc(
		func(params operations.DeleteKeysIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetKeysHandler = operations.GetKeysHandlerFunc(
		func(params operations.GetKeysParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetKeysIDHandler = operations.GetKeysIDHandlerFunc(
		func(params operations.GetKeysIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutKeysIDHandler = operations.PutKeysIDHandlerFunc(
		func(params operations.PutKeysIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	/* ==========================================================================
	 *
	 *    Musicians
	 *
	 * ========================================================================*/

	api.DeleteMusiciansIDHandler = operations.DeleteMusiciansIDHandlerFunc(
		func(params operations.DeleteMusiciansIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetMusiciansHandler = operations.GetMusiciansHandlerFunc(handleGetMusicians)

	api.GetMusiciansIDHandler = operations.GetMusiciansIDHandlerFunc(
		func(params operations.GetMusiciansIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutMusiciansIDHandler = operations.PutMusiciansIDHandlerFunc(
		func(params operations.PutMusiciansIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	/* ==========================================================================
	 *
	 *    Parts
	 *
	 * ========================================================================*/

	api.DeletePartsIDHandler = operations.DeletePartsIDHandlerFunc(
		func(params operations.DeletePartsIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPartsHandler = operations.GetPartsHandlerFunc(
		func(params operations.GetPartsParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPartsIDHandler = operations.GetPartsIDHandlerFunc(
		func(params operations.GetPartsIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutPartsIDHandler = operations.PutPartsIDHandlerFunc(
		func(params operations.PutPartsIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	/* ==========================================================================
	 *
	 *    Performances
	 *
	 * ========================================================================*/
	api.DeletePerformancesIDHandler = operations.DeletePerformancesIDHandlerFunc(
		func(params operations.DeletePerformancesIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPerformancesHandler = operations.GetPerformancesHandlerFunc(
		func(params operations.GetPerformancesParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPerformancesIDHandler = operations.GetPerformancesIDHandlerFunc(
		func(params operations.GetPerformancesIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutPerformancesHandler = operations.PutPerformancesHandlerFunc(
		handlePutPerformances)

	/* ==========================================================================
	 *
	 *    Pieces
	 *
	 * ========================================================================*/
	api.DeletePiecesIDHandler = operations.DeletePiecesIDHandlerFunc(
		func(params operations.DeletePiecesIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPiecesHandler = operations.GetPiecesHandlerFunc(
		func(params operations.GetPiecesParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetPiecesIDHandler =
		operations.GetPiecesIDHandlerFunc(handleGetPiecesId)

	api.GetPiecesSearchHandler =
		operations.GetPiecesSearchHandlerFunc(handleGetPiecesSearch)

	api.GetPiecesIDPerformancesHandler =
		operations.GetPiecesIDPerformancesHandlerFunc(handleGetPiecePerformances)

	api.PutPiecesHandler = operations.PutPiecesHandlerFunc(handlePutPieces)

	api.PostPiecesIDHandler = operations.PostPiecesIDHandlerFunc(
		func(params operations.PostPiecesIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	/* ==========================================================================
	 *
	 *    Recordings
	 *
	 * ========================================================================*/
	api.DeleteRecordingsIDHandler = operations.DeleteRecordingsIDHandlerFunc(
		func(params operations.DeleteRecordingsIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.GetRecordingsHandler = operations.GetRecordingsHandlerFunc(
		func(params operations.GetRecordingsParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})
	api.GetRecordingsIDHandler = operations.GetRecordingsIDHandlerFunc(
		func(params operations.GetRecordingsIDParams) middleware.Responder {
			return middleware.NotImplemented("not implemented")
		})

	api.PutRecordingsHandler =
		operations.PutRecordingsHandlerFunc(handlePutRecordings)

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *http.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

type Logger struct {
	handler http.Handler
}

func (l Logger) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	log.Printf("%s %s", r.Method, r.URL.Path)
	l.handler.ServeHTTP(w, r)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	c := cors.New(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedHeaders:   []string{"*"},
		AllowedMethods:   []string{"GET", "PUT", "POST", "DELETE"},
		AllowCredentials: true,
	})

	return c.Handler(Logger{handler})
	return handler
}
