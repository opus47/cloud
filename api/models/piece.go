// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Piece piece
// swagger:model Piece
type Piece struct {

	// catalog
	Catalog string `json:"catalog,omitempty"`

	// composer
	Composer *Composer `json:"composer,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// key
	Key *Key `json:"key,omitempty"`

	// movements
	Movements PieceMovements `json:"movements"`

	// number
	Number int64 `json:"number,omitempty"`

	// parts
	Parts PieceParts `json:"parts"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this piece
func (m *Piece) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComposer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Piece) validateComposer(formats strfmt.Registry) error {

	if swag.IsZero(m.Composer) { // not required
		return nil
	}

	if m.Composer != nil {

		if err := m.Composer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composer")
			}
			return err
		}

	}

	return nil
}

func (m *Piece) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if m.Key != nil {

		if err := m.Key.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Piece) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Piece) UnmarshalBinary(b []byte) error {
	var res Piece
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
